<dec f='exim/src/local_scan.h' l='169' type='pid_t child_open_exim(int * )'/>
<use f='exim/src/deliver.c' l='2619' u='c' c='deliver_local'/>
<use f='exim/src/deliver.c' l='7257' u='c' c='deliver_message'/>
<use f='exim/src/deliver.c' l='7457' u='c' c='deliver_message'/>
<use f='exim/src/deliver.c' l='8124' u='c' c='deliver_message'/>
<use f='exim/src/moan.c' l='74' u='c' c='moan_send_message'/>
<use f='exim/src/moan.c' l='484' u='c' c='moan_tell_someone'/>
<use f='exim/src/moan.c' l='724' u='c' c='moan_skipped_syntax_errors'/>
<def f='exim/src/child.c' l='189' ll='193' type='pid_t child_open_exim(int * fdptr)'/>
<doc f='exim/src/child.c' l='173'>/* This function is called when Exim wants to run a parallel instance of itself
in order to inject a message via the standard input. The function creates a
child process and runs Exim in it. It sets up a pipe to the standard input of
the new process, and returns that to the caller via fdptr. The function returns
the pid of the new process, or -1 if things go wrong. If debug_fd is
non-negative, it is passed as stderr.

This interface is now a just wrapper for the more complicated function
child_open_exim2(), which has additional arguments. The wrapper must continue
to exist, even if all calls from within Exim are changed, because it is
documented for use from local_scan().

Argument: fdptr   pointer to int for the stdin fd
Returns:          pid of the created process or -1 if anything has gone wrong
*/</doc>
