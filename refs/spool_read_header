<dec f='exim/src/functions.h' l='443' type='int spool_read_header(uschar * , BOOL , BOOL )'/>
<use f='exim/src/deliver.c' l='5596' u='c' c='deliver_message'/>
<use f='exim/src/deliver.c' l='8506' u='c' c='deliver_get_sender_address'/>
<use f='exim/src/exim.c' l='4967' u='c' c='main'/>
<use f='exim/src/queue.c' l='534' u='c' c='queue_run'/>
<use f='exim/src/queue.c' l='867' u='c' c='queue_list'/>
<use f='exim/src/queue.c' l='1099' u='c' c='queue_action'/>
<def f='exim/src/spool_in.c' l='238' ll='946' type='int spool_read_header(uschar * name, BOOL read_headers, BOOL subdir_set)'/>
<doc f='exim/src/spool_in.c' l='213'>/* This function reads a spool header file and places the data into the
appropriate global variables. The header portion is always read, but header
structures are built only if read_headers is set true. It isn&apos;t, for example,
while generating -bp output.

It may be possible for blocks of nulls (binary zeroes) to get written on the
end of a file if there is a system crash during writing. It was observed on an
earlier version of Exim that omitted to fsync() the files - this is thought to
have been the cause of that incident, but in any case, this code must be robust
against such an event, and if such a file is encountered, it must be treated as
malformed.

As called from deliver_message() (at least) we are running as root.

Arguments:
  name          name of the header file, including the -H
  read_headers  TRUE if in-store header structures are to be built
  subdir_set    TRUE is message_subdir is already set

Returns:        spool_read_OK        success
                spool_read_notopen   open failed
                spool_read_enverror  error in the envelope portion
                spool_read_hdrerror  error in the header portion
*/</doc>
