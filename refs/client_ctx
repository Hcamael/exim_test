<def f='exim/src/tls-openssl.c' l='133' type='SSL_CTX *'/>
<use f='exim/src/tls-openssl.c' l='2288' u='a' c='tls_client_start'/>
<use f='exim/src/tls-openssl.c' l='2312' u='r' c='tls_client_start'/>
<use f='exim/src/tls-openssl.c' l='2332' u='r' c='tls_client_start'/>
<use f='exim/src/tls-openssl.c' l='2336' u='r' c='tls_client_start'/>
<doc f='exim/src/tls-openssl.c' l='114'>/* We have three different contexts to care about.

Simple case: client, `client_ctx`
 As a client, we can be doing a callout or cut-through delivery while receiving
 a message.  So we have a client context, which should have options initialised
 from the SMTP Transport.

Server:
 There are two cases: with and without ServerNameIndication from the client.
 Given TLS SNI, we can be using different keys, certs and various other
 configuration settings, because they&apos;re re-expanded with $tls_sni set.  This
 allows vhosting with TLS.  This SNI is sent in the handshake.
 A client might not send SNI, so we need a fallback, and an initial setup too.
 So as a server, we start out using `server_ctx`.
 If SNI is sent by the client, then we as server, mid-negotiation, try to clone
 `server_sni` from `server_ctx` and then initialise settings by re-expanding
 configuration.
*/</doc>
