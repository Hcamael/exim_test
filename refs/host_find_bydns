<dec f='exim/src/functions.h' l='221' type='int host_find_bydns(host_item * , const uschar * , int , uschar * , uschar * , uschar * , const dnssec_domains * , const uschar ** , BOOL * )'/>
<use f='exim/src/verify.c' l='1872' u='c' c='verify_address'/>
<use f='exim/src/smtp_in.c' l='3525' u='c' c='smtp_verify_helo'/>
<use f='exim/src/routers/dnslookup.c' l='301' u='c' c='dnslookup_router_entry'/>
<use f='exim/src/routers/rf_lookup_hostlist.c' l='105' u='c' c='rf_lookup_hostlist'/>
<use f='exim/src/routers/rf_lookup_hostlist.c' l='140' u='c' c='rf_lookup_hostlist'/>
<use f='exim/src/match.c' l='218' u='c' c='check_string'/>
<use f='exim/src/host.c' l='1844' u='c' c='host_name_lookup'/>
<def f='exim/src/host.c' l='2564' ll='3197' type='int host_find_bydns(host_item * host, const uschar * ignore_target_hosts, int whichrrs, uschar * srv_service, uschar * srv_fail_domains, uschar * mx_fail_domains, const dnssec_domains * dnssec_d, const uschar ** fully_qualified_name, BOOL * removed)'/>
<doc f='exim/src/host.c' l='2524'>/* The input is a host_item structure with the name field filled in and the
address field set to NULL. This may be in a chain of other host items. The
lookup may result in more than one IP address, in which case we must created
new host blocks for the additional addresses, and insert them into the chain.
The original name may not be fully qualified. Use the fully_qualified_name
argument to return the official name, as returned by the resolver.

Arguments:
  host                  point to initial host item
  ignore_target_hosts   a list of hosts to ignore
  whichrrs              flags indicating which RRs to look for:
                          HOST_FIND_BY_SRV  =&gt; look for SRV
                          HOST_FIND_BY_MX   =&gt; look for MX
                          HOST_FIND_BY_A    =&gt; look for A
                          HOST_FIND_BY_AAAA =&gt; look for AAAA
                        also flags indicating how the lookup is done
                          HOST_FIND_QUALIFY_SINGLE   ) passed to the
                          HOST_FIND_SEARCH_PARENTS   )   resolver
			  HOST_FIND_IPV4_FIRST =&gt; reverse usual result ordering
			  HOST_FIND_IPV4_ONLY  =&gt; MX results elide ipv6
  srv_service           when SRV used, the service name
  srv_fail_domains      DNS errors for these domains =&gt; assume nonexist
  mx_fail_domains       DNS errors for these domains =&gt; assume nonexist
  dnssec_d.request =&gt;   make dnssec request: domainlist
  dnssec_d.require =&gt;   ditto and nonexist failures
  fully_qualified_name  if not NULL, return fully-qualified name
  removed               set TRUE if local host was removed from the list

Returns:                HOST_FIND_FAILED  Failed to find the host or domain;
                                          if there was a syntax error,
                                          host_find_failed_syntax is set.
                        HOST_FIND_AGAIN   Could not resolve at this time
			HOST_FIND_SECURITY dnsssec required but not acheived
                        HOST_FOUND        Host found
                        HOST_FOUND_LOCAL  The lowest MX record points to this
                                          machine, if MX records were found, or
                                          an A record that was found contains
                                          an address of the local host
*/</doc>
